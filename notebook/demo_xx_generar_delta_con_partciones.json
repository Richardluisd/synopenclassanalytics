{
	"name": "demo_xx_generar_delta_con_partciones",
	"properties": {
		"folder": {
			"name": "Demos"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DataProcess",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2ad03f41-3a10-43dd-be7e-8f487e648ea6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"384bfc7a-3586-420e-9167-17d1f517c004": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "2383396",
										"1": "10989287",
										"2": "1",
										"3": "-",
										"4": "734AE5CC-BBBE-4246",
										"5": "2019-01-29 13:21:17",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "901",
										"10": "09000234",
										"11": "F39188D8876B401DA40A",
										"12": "9.000000",
										"13": "0.0352",
										"14": "0.0000",
										"15": "U",
										"16": "2019-07-21 13:21:17.177"
									},
									{
										"0": "2383396",
										"1": "10989288",
										"2": "2",
										"3": "-",
										"4": "734AE5CC-BBBE-4246",
										"5": "2019-01-29 13:21:17",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "901",
										"10": "09000100",
										"11": "F39188D8876B401DA40A",
										"12": "2.000000",
										"13": "0.0352",
										"14": "0.0000",
										"15": "U",
										"16": "2019-07-21 13:21:17.177"
									},
									{
										"0": "2383396",
										"1": "10989289",
										"2": "3",
										"3": "-",
										"4": "734AE5CC-BBBE-4246",
										"5": "2019-01-29 13:21:17",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "901",
										"10": "09002983",
										"11": "F39188D8876B401DA40A",
										"12": "9.000000",
										"13": "0.0352",
										"14": "1.1600",
										"15": "U",
										"16": "2019-07-21 13:21:17.177"
									},
									{
										"0": "2383396",
										"1": "10989290",
										"2": "4",
										"3": "-",
										"4": "734AE5CC-BBBE-4246",
										"5": "2019-01-29 13:21:17",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "901",
										"10": "07000914",
										"11": "F39188D8876B401DA40A",
										"12": "7.000000",
										"13": "0.0352",
										"14": "10.2000",
										"15": "U",
										"16": "2019-07-21 13:21:17.177"
									},
									{
										"0": "2383397",
										"1": "10989291",
										"2": "1",
										"3": "-",
										"4": "D25A72BB-6C34-4B19",
										"5": "2019-01-29 13:21:17",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "009",
										"10": "09001768",
										"11": "2BB4F60AAAD349CF9E4D",
										"12": "5.000000",
										"13": "0.0352",
										"14": "0.0000",
										"15": "U",
										"16": "2019-07-21 13:21:17.63"
									},
									{
										"0": "2383397",
										"1": "10989292",
										"2": "2",
										"3": "-",
										"4": "D25A72BB-6C34-4B19",
										"5": "2019-01-29 13:21:17",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "009",
										"10": "10100557",
										"11": "2BB4F60AAAD349CF9E4D",
										"12": "2.000000",
										"13": "0.0352",
										"14": "8.6400",
										"15": "U",
										"16": "2019-07-21 13:21:17.63"
									},
									{
										"0": "2383397",
										"1": "10989293",
										"2": "3",
										"3": "-",
										"4": "D25A72BB-6C34-4B19",
										"5": "2019-01-29 13:21:17",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "009",
										"10": "06000637",
										"11": "2BB4F60AAAD349CF9E4D",
										"12": "1.000000",
										"13": "0.0352",
										"14": "0.0000",
										"15": "U",
										"16": "2019-07-21 13:21:17.63"
									},
									{
										"0": "2383397",
										"1": "10989294",
										"2": "4",
										"3": "-",
										"4": "D25A72BB-6C34-4B19",
										"5": "2019-01-29 13:21:17",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "009",
										"10": "06000799",
										"11": "2BB4F60AAAD349CF9E4D",
										"12": "1.000000",
										"13": "0.0352",
										"14": "2.8400",
										"15": "U",
										"16": "2019-07-21 13:21:17.63"
									},
									{
										"0": "2383397",
										"1": "10989295",
										"2": "5",
										"3": "-",
										"4": "D25A72BB-6C34-4B19",
										"5": "2019-01-29 13:21:17",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "009",
										"10": "07000118",
										"11": "2BB4F60AAAD349CF9E4D",
										"12": "10.000000",
										"13": "0.0352",
										"14": "0.0000",
										"15": "U",
										"16": "2019-07-21 13:21:17.63"
									},
									{
										"0": "2383398",
										"1": "10989296",
										"2": "1",
										"3": "-",
										"4": "D1FF40DF-853E-47DE",
										"5": "2019-01-29 13:21:18",
										"6": "2019-01-29",
										"7": "20190129",
										"8": "1321",
										"9": "009",
										"10": "07000342",
										"11": "BF0F7A8A99DF47B48551",
										"12": "5.000000",
										"13": "0.0352",
										"14": "4.4600",
										"15": "U",
										"16": "2019-07-21 13:21:18.177"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "SaleId",
										"type": "int"
									},
									{
										"key": "1",
										"name": "SaleLineId",
										"type": "bigint"
									},
									{
										"key": "2",
										"name": "InvoiceLine",
										"type": "int"
									},
									{
										"key": "3",
										"name": "OldTicket",
										"type": "string"
									},
									{
										"key": "4",
										"name": "InvoiceCode",
										"type": "string"
									},
									{
										"key": "5",
										"name": "DateTime",
										"type": "timestamp"
									},
									{
										"key": "6",
										"name": "Date",
										"type": "date"
									},
									{
										"key": "7",
										"name": "DateKey",
										"type": "int"
									},
									{
										"key": "8",
										"name": "HourKey",
										"type": "int"
									},
									{
										"key": "9",
										"name": "StoreCode",
										"type": "string"
									},
									{
										"key": "10",
										"name": "ProductCode",
										"type": "string"
									},
									{
										"key": "11",
										"name": "CustomerCode",
										"type": "string"
									},
									{
										"key": "12",
										"name": "Quantity",
										"type": "decimal"
									},
									{
										"key": "13",
										"name": "SalePrice",
										"type": "decimal"
									},
									{
										"key": "14",
										"name": "PurchasePrice",
										"type": "decimal"
									},
									{
										"key": "15",
										"name": "UnitMeasure",
										"type": "string"
									},
									{
										"key": "16",
										"name": "LoadDate",
										"type": "timestamp"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/edc28f36-9160-4500-b465-77e4ca43b417/resourceGroups/rg-openclassanalytics/providers/Microsoft.Synapse/workspaces/synopenclassanalytics/bigDataPools/DataProcess",
				"name": "DataProcess",
				"type": "Spark",
				"endpoint": "https://synopenclassanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DataProcess",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# PySpark DataFrame\r\n",
					"df = spark.read.load('abfss://raw@adlsopenclassanalytics.dfs.core.windows.net/Cornerchy_OLTP/Sales/*/*/*/*.parquet', format='parquet')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run includes/common_functions"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta import *"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Generate list patition field.\r\n",
					"def generatePartitionField(partition_column, level):\r\n",
					"    if level == \"date\":\r\n",
					"        return [f\"{partition_column}_year\",f\"{partition_column}_month\",f\"{partition_column}_date\"]\r\n",
					"    if level == \"month\":\r\n",
					"        return [f\"{partition_column}_year\",f\"{partition_column}_month\"]\r\n",
					"    if level == \"year\":\r\n",
					"        return [f\"{partition_column}_year\"]\r\n",
					"# Check is is date and Add year, month and day in dataframe from date\r\n",
					"def addDatesFields(df, date_column, level):\r\n",
					"    if level == \"date\":\r\n",
					"        try:\r\n",
					"            print(f\"addDatesFields: day - date_column: {date_column}\")\r\n",
					"            df = df.withColumn(f\"{date_column}_year\", coalesce(year(to_date(col(date_column),\"yyyy-MM-dd\")),lit('1900'))) \\\r\n",
					"                .withColumn(f\"{date_column}_month\", coalesce(lpad(month(to_date(col(date_column),\"yyyy-MM-dd\")),2,\"0\"),lit(\"01\"))) \\\r\n",
					"                .withColumn(f\"{date_column}_date\", to_date(col(date_column),\"yyyy-MM-dd\"))\r\n",
					"            return df\r\n",
					"        except Exception as e:\r\n",
					"            print(f\"addDatesFields: day - exception: {e} - date_column: {date_column}\")\r\n",
					"            return df\r\n",
					"    if level == \"month\":\r\n",
					"        try:\r\n",
					"            print(f\"addDatesFields: month - date_column: {date_column}\")\r\n",
					"            df = df.withColumn(f\"{date_column}_year\", coalesce(year(to_date(col(date_column),\"yyyy-MM-dd\")),lit('1900'))) \\\r\n",
					"                .withColumn(f\"{date_column}_month\", coalesce(lpad(month(to_date(col(date_column),\"yyyy-MM-dd\")),2,\"0\"),lit(\"01\")))\r\n",
					"            return df\r\n",
					"        except Exception as e:\r\n",
					"            print(f\"addDatesFields: month - exception: {e} - date_column: {date_column}\")\r\n",
					"            return df\r\n",
					"    if level == \"year\":\r\n",
					"        try:\r\n",
					"            print(f\"addDatesFields: year - date_column: {date_column}\")\r\n",
					"            df = df.withColumn(f\"{date_column}_year\", coalesce(year(to_date(col(date_column),\"yyyy-MM-dd\")),lit('1900')))\r\n",
					"            return df\r\n",
					"        except Exception as e:\r\n",
					"            print(f\"addDatesFields: year - exception: {e} - date_column: {date_column}\")\r\n",
					"            return df"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = addDatesFields(df, \"Date\", \"date\")\r\n",
					"df.show()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.write.format(\"delta\").mode(\"overwrite\").option(\"path\", 'abfss://std@adlsopenclassanalytics.dfs.core.windows.net/test/Sales').partitionBy(\"Date_year\",\"Date_month\",\"Date_date\").save()"
				],
				"execution_count": 9
			}
		]
	}
}