{
	"name": "Demo_07_configuracion_dinamica",
	"properties": {
		"description": "Notebook for demonstration of Spark session configuration from Synapse",
		"folder": {
			"name": "Demos"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bec9d82c-b27e-4f3a-a91d-a306793c67ac"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"%%configure -f\r\n",
					"{ \r\n",
					"    \"conf\":{\r\n",
					"        \"spark.dynamicAllocation.enabled\":\"true\",\r\n",
					"        \"spark.dynamicAllocation.minExecutors\": 1,\r\n",
					"        \"spark.dynamicAllocation.maxExecutors\": 3\r\n",
					"    },\r\n",
					"    \"driverCores\": \r\n",
					"    { \r\n",
					"        \"activityParameterName\": \"customDriverCores\", \r\n",
					"        \"defaultValue\": 4 //Valores recomendados: [4, 8, 16, 32, 64, 80]\r\n",
					"    }, \r\n",
					"    \"driverMemory\": \r\n",
					"    { \r\n",
					"        \"activityParameterName\": \"customDriverMemory\", \r\n",
					"        \"defaultValue\": \"28g\" // Valores recomendados: [\"28g\", \"56g\", \"112g\", \"224g\", \"400g\", \"472g\"]\r\n",
					"    },\r\n",
					"    \"numExecutors\":\r\n",
					"    {\r\n",
					"        \"activityParameterName\": \"customNumExecutors\", \r\n",
					"        \"defaultValue\": 2 \r\n",
					"    },\r\n",
					"    \"executorCores\":\r\n",
					"    {\r\n",
					"        \"activityParameterName\": \"customExecutorCores\", \r\n",
					"        \"defaultValue\": 4 \r\n",
					"    },\r\n",
					"    \"executorMemory\":\r\n",
					"    {\r\n",
					"        \"activityParameterName\": \"customExecutorMemory\", \r\n",
					"        \"defaultValue\": \"28g\" \r\n",
					"    }\r\n",
					"}"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Referencia a librerías**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run Data Process/includes/common_functions"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run Data Process/includes/stream_functions"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run Data Process/includes/storage_mng_functions"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Parámetros de entrada**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"# Parámetros de entidad\r\n",
					"database = \"Cornerchy\"\r\n",
					"table = \"Sales\"\r\n",
					"entity = \"\"\r\n",
					"primarykey = \"SaleLineId\"\r\n",
					"partitionBy = \"Date\"\r\n",
					"level = \"month\"\r\n",
					"cleanSpecialChar = False\r\n",
					"metadata_columns = \"load_date,type_process,filename\"\r\n",
					"\r\n",
					"# Parámetros de proceso\r\n",
					"period = \"*/*/*\"\r\n",
					"source_folder= \"Cornerchy_OLTP/Sales/\"\r\n",
					"path_source = \"abfss://raw@adlsopenclassanalytics.dfs.core.windows.net/\"\r\n",
					"path_destination = \"abfss://std@adlsopenclassanalytics.dfs.core.windows.net/\"\r\n",
					"\r\n",
					"repartition_num_files = 1\r\n",
					"typeProcess = \"full\" "
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Asignación de valores y generación de constantes**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"maxFilesPerTrigger = 1\r\n",
					"\r\n",
					"path_source_completed = f\"{path_source}{source_folder}{period}/{entity}*.csv.gz\"\r\n",
					"path_destination_completed = f\"{path_destination}{database}/{table}\"\r\n",
					"path_deltaCheckpointPath=f\"{path_destination}{database}/{table}_CheckpointFolder\"\r\n",
					"\r\n",
					"print(path_source_completed)\r\n",
					"print(path_destination_completed)\r\n",
					"print(path_deltaCheckpointPath)"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Ejecución de la carga**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"import time\r\n",
					"\r\n",
					"if checkDeltaFolder(path_destination_completed):\r\n",
					"    dfProcStream=inc_stream_trigger_one(path_source_completed, path_deltaCheckpointPath, primarykey, metadata_columns, partitionBy, level, path_destination_completed, repartition_num_files, table)\r\n",
					"else:\r\n",
					"    dfProcStream=first_load_stream_last_file(path_source_completed, path_deltaCheckpointPath, primarykey, metadata_columns, partitionBy, level, path_destination_completed, repartition_num_files, maxFilesPerTrigger, table)\r\n",
					"\r\n",
					"time.sleep(15)"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Control de la ejecución del streaming**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"print(dfProcStream.isActive)\r\n",
					"print(dfProcStream.status)\r\n",
					"\r\n",
					"while dfProcStream.status[\"isDataAvailable\"]:\r\n",
					"    print(\"wait for load stream...\")\r\n",
					"    time.sleep(30)\r\n",
					"print(\"stopping stream...\")\r\n",
					"dfProcStream.stop()"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Gestión del almacenamiento**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"compact_delta_table_storage(path_destination_completed, repartition_num_files)"
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}