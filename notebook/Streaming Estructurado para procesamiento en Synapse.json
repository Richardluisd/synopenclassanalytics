{
	"name": "Streaming Estructurado para procesamiento en Synapse",
	"properties": {
		"folder": {
			"name": "Ejemplos de publicaciones"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DataProcess",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "36213b00-3b89-4693-a4de-602fb06d861e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/edc28f36-9160-4500-b465-77e4ca43b417/resourceGroups/rg-openclassanalytics/providers/Microsoft.Synapse/workspaces/synopenclassanalytics/bigDataPools/DataProcess",
				"name": "DataProcess",
				"type": "Spark",
				"endpoint": "https://synopenclassanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DataProcess",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"set spark.sql.streaming.schemaInference=true\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_stream = spark \\\r\n",
					"    .readStream \\\r\n",
					"    .format('parquet') \\\r\n",
					"    .load('abfss://raw@adlsopenclassanalytics.dfs.core.windows.net/Cornerchy_OLTP/Sales/*/*/*/*.parquet')"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_stream.isStreaming"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta import *"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_proceess = df_stream.writeStream.format(\"delta\") \\\r\n",
					"    .option('checkpointLocation','abfss://std@adlsopenclassanalytics.dfs.core.windows.net/Cornerchy/Sales_demo02_checkpointLocation') \\\r\n",
					"    .option('path','abfss://std@adlsopenclassanalytics.dfs.core.windows.net/Cornerchy/Sales_demo02/') \\\r\n",
					"    .start()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_proceess.status"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_proceess.stop()"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"maxFilesPerTrigger = 1\r\n",
					"path_source_completed = 'abfss://raw@adlsopenclassanalytics.dfs.core.windows.net/Cornerchy_OLTP/Sales/*/*/*/*.parquet'\r\n",
					"primarykey = 'saleslineid'\r\n",
					"metadata_columns = 'load_date, type_process'\r\n",
					"typeProcess = 'inc'\r\n",
					"partitionBy = None\r\n",
					"level = 'month'\r\n",
					"path_destination_completed = 'abfss://std@adlsopenclassanalytics.dfs.core.windows.net/Cornerchy/Sales_demo02/'\r\n",
					"repartition_num_files = 32\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"allcolumns\r\n",
					"generatePKs\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upsertToDelta(microBatchOutputDF, batchId, primarykey, metadata_columns, partitionBy, level, path_destination_completed, repartition_num_files, typeProcess):\r\n",
					"    if primarykey == None or primarykey == \"\":\r\n",
					"        columns = allColumns(microBatchOutputDF, metadata_columns.split(','))\r\n",
					"        primaryKeys = generatePKs(columns)\r\n",
					"    else:\r\n",
					"        columns = primarykey.split(\",\")\r\n",
					"        primaryKeys = generatePKs(columns)\r\n",
					"        microBatchOutputDF = microBatchOutputDF.withColumn(\"load_date\", current_timestamp())\r\n",
					"        microBatchOutputDF = microBatchOutputDF.withColumn(\"type_process\", lit(typeProcess))\r\n",
					"    if checkDeltaFolder(path_destination_completed):\r\n",
					"        curatedTable = DeltaTable.forPath(spark, path_destination_completed)\r\n",
					"        curatedTable.alias(\"deltaTable\").merge(\r\n",
					"        microBatchOutputDF.alias(\"incTable\")\r\n",
					"        ,primaryKeys) \\\r\n",
					"        .whenMatchedUpdateAll() \\\r\n",
					"        .whenNotMatchedInsertAll() \\\r\n",
					"        .execute()\r\n",
					"    else:\r\n",
					"        print (f\"upsertToDelta: {batchId} - Full\")\r\n",
					"    if partitionBy == None or partitionBy == \"\":\r\n",
					"        microBatchOutputDF.repartition(repartition_num_files).write.format(\"delta\").mode(\"overwrite\").option(\"escape\",\"\\\"\").save(path_destination_completed)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_proceess = (spark.readStream.option(\"maxFilesPerTrigger\", maxFilesPerTrigger)\r\n",
					"    .option(\"maxFileAge\", 0).format('parquet').option(\"inferschema\", True)\r\n",
					"    .load(path_source_completed).withColumn(\"filename\", input_file_name())\r\n",
					"    .writeStream.format('delta')\r\n",
					"    .trigger(once=True) \\\r\n",
					"    .foreachBatch(lambda microBatchOutputDF, batchId: upsertToDelta(microBatchOutputDF, batchId, primarykey, metadata_columns, partitionBy, level, path_destination_completed, repartition_num_files))\r\n",
					"    .outputMode(\"update\")\r\n",
					"    .option('checkpointLocation',path_deltaCheckpointPath) \\\r\n",
					"    .start() \\\r\n",
					"    .awaitTermination()\r\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_proceess.status"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_proceess.stop()"
				],
				"execution_count": null
			}
		]
	}
}